name: Deploy

on:
    release:
        types: [published]

concurrency:
    group: "deploy"
    cancel-in-progress: false

jobs:
    build:
        uses: ./.github/workflows/build.yml

    validate-tag:
        runs-on: ubuntu-latest
        steps:
            - name: Validate tag
              run: |
                  TAG="${{ github.event.release.tag_name }}"
                  echo "Validating tag: $TAG"

                  # Check if tag matches the required pattern
                  if ! echo "$TAG" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-((dry|canary|alpha|beta|rc)\.[0-9]+))?$'; then
                      echo "❌ Invalid tag format: $TAG"
                      echo "Tag must start with v[MAJOR].[MINOR].[PATCH]"
                      echo "Optional suffix: -[dry|canary|alpha|beta|rc].[NUMBER]"
                      exit 1
                  fi

                  echo "✅ Tag is valid"

    publish-pkg:
        needs: [build, validate-tag]
        environment:
            name: npm-publish
            url: https://www.npmjs.com/package/commodity
        runs-on: ubuntu-latest
        permissions:
            contents: read # Required for checkout
            id-token: write # Required for OIDC with npm
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  node-version: "lts/*"
                  registry-url: "https://registry.npmjs.org"
                  package-manager-cache: false

            - name: Update npm
              run: npm install -g npm@latest

            - name: Download build artifacts
              uses: actions/download-artifact@v5
              with:
                  name: commodity-build
                  path: packages/commodity

            - name: Set version from release tag
              working-directory: ./packages/commodity
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  VERSION=${VERSION#v}
                  echo "Setting version to: $VERSION"
                  npm version $VERSION --no-git-tag-version
                  echo "Package.json version is now: $(cat package.json | jq -r .version)"

            - name: Dry publish
              if: contains(github.event.release.tag_name, 'dry')
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag dry --dry-run

            - name: Publish to Canary
              if: contains(github.event.release.tag_name, 'canary')
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag canary

            - name: Publish to Alpha
              if: contains(github.event.release.tag_name, 'alpha')
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag alpha

            - name: Publish to Beta
              if: contains(github.event.release.tag_name, 'beta')
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag beta

            - name: Publish to RC
              if: contains(github.event.release.tag_name, 'rc')
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag rc

            - name: Publish to Latest
              if: |
                  github.event.release.prerelease == false &&
                  contains(github.event.release.tag_name, '-') == false
              working-directory: ./packages/commodity
              run: |
                  npm publish --tag latest

    deploy-pages:
        environment:
            name: github-pages
            url: ${{ steps.deploy-pages.outputs.page_url }}
        runs-on: ubuntu-latest
        if: |
            github.event.release.prerelease == false &&
            contains(github.event.release.tag_name, '-') == false
        needs: [build, validate-tag]
        permissions:
            contents: write
            pages: write # Required for deploying to GitHub Pages
            id-token: write # Required for OIDC with GitHub Pages
        steps:
            - name: Deploy to GitHub Pages
              id: deploy-pages
              uses: actions/deploy-pages@v4

            - name: Checkout
              uses: actions/checkout@v5
              with:
                  token: ${{ secrets.PUSH_RESTRICTED_TAGS_TOKEN }}

            - name: Configure Git
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

            - name: Set latest-stable-release tag
              run: |
                  git push --delete origin latest-stable-release || true
                  git tag latest-stable-release
                  git push origin --tags --force
