{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.15",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "commodity!",
  "docComment": "",
  "name": "commodity",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "commodity!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!$:type",
          "docComment": "/**\n * Creates a supplies object that provides both direct property access and function access. This type represents the resolved dependencies that can be passed to factory functions. It enables accessing dependencies either as properties or by calling with a supplier object.\n *\n * @typeParam SUPPLIERS - Array of suppliers to create the supply object from\n *\n * @returns A callable object that provides both property access and function call access to supplies\n *\n * @example\n * ```typescript\n * function factory(supplies: $<[typeof userRepoSupplier, typeof loggerSupplier]>) {\n *   // Property access\n *   const repo = supplies.userRepo.unpack()\n *   // Function access\n *   const logger = supplies(loggerSupplier)\n *   return new UserService(repo, logger)\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type $<SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(<NAME extends keyof "
            },
            {
              "kind": "Reference",
              "text": "SupplyMapFromSuppliers",
              "canonicalReference": "commodity!SupplyMapFromSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>(supplier: {\n    name: NAME;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "SupplyMapFromSuppliers",
              "canonicalReference": "commodity!SupplyMapFromSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>[NAME] extends {\n    unpack(): infer VALUE;\n} ? VALUE : never) & "
            },
            {
              "kind": "Reference",
              "text": "SupplyMapFromSuppliers",
              "canonicalReference": "commodity!SupplyMapFromSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "$",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 11
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "commodity!createMarket:function(1)",
          "docComment": "/**\n * Creates a new market instance for managing suppliers and products. A market provides a namespace for creating and managing suppliers without name conflicts. Each market maintains its own registry of supplier names to prevent collisions.\n *\n * Markets are the entry point for the commodity dependency injection system. They allow you to define resources (simple values) and products (complex objects with dependencies) in a type-safe manner.\n *\n * @returns A market object with methods to create suppliers and products\n *\n * @example\n * ```typescript\n * // Create a market\n * const market = createMarket()\n *\n * // Define a resource (simple value)\n * const config = market.offer(\"config\").asResource<AppConfig>()\n * const packedConfig = config.pack({ apiUrl: \"https://api.example.com\", debug: true })\n *\n * // Define a product (complex object with dependencies)\n * const logger = market.offer(\"logger\").asProduct({\n *   suppliers: [config],\n *   factory: (deps) => new Logger(deps.config.unpack())\n * })\n *\n * // Assemble the product\n * const loggerInstance = logger.assemble({ config: packedConfig })\n * const loggerValue = loggerInstance.unpack()\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createMarket: () => "
            },
            {
              "kind": "Content",
              "text": "{\n    offer<NAME extends string>(name: NAME): {\n        asResource: <CONSTRAINT>() => {\n            name: NAME;\n            pack<THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSupplier",
              "canonicalReference": "commodity!ResourceSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, CONSTRAINT>, NEW_VALUE extends CONSTRAINT>(this: THIS, value: NEW_VALUE): {\n                name: NAME;\n                pack<THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, CONSTRAINT>, NEW_VALUE_1 extends CONSTRAINT>(this: THIS_1, value: NEW_VALUE_1): {\n                    name: NAME;\n                    pack: (value: CONSTRAINT) => "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, CONSTRAINT>;\n                    _resource: true;\n                    unpack: () => NEW_VALUE_1;\n                };\n                _resource: true;\n                unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE>;\n            };\n            _constraint: CONSTRAINT;\n            _resource: true;\n        };\n        asProduct: <VALUE, SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, IS_PROTOTYPE extends false ? false : boolean>[] = [], JUST_IN_TIME extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, IS_PROTOTYPE extends false ? false : boolean>[] = [], IS_PROTOTYPE extends boolean = false>(config: {\n            suppliers?: [...SUPPLIERS];\n            justInTime?: [...JUST_IN_TIME];\n            factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME]>) => VALUE;\n            init?: (value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>) => void;\n            lazy?: boolean;\n            isPrototype?: IS_PROTOTYPE;\n        }) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n            name: NAME;\n            suppliers: SUPPLIERS;\n            justInTime: JUST_IN_TIME;\n            factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME]>) => VALUE;\n            lazy: boolean;\n            init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>) => void) | undefined;\n            pack: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS, value: NEW_VALUE_2) => {\n                name: NAME;\n                supplies: {};\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_1, value: NEW_VALUE_3) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                    unpack: () => NEW_VALUE_3;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                    _product: true;\n                    _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                };\n                _dependsOnOneOf: () => boolean;\n                unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                reassemble<THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_1): THIS_1;\n                _product: true;\n                _supplier: THIS;\n            };\n            assemble: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>) => {\n                name: NAME;\n                supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_1, value: NEW_VALUE_3) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                    unpack: () => NEW_VALUE_3;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                    _product: true;\n                    _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                };\n                unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"factory\"]>;\n                reassemble<THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_1, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_1 & {\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"factory\"]>;\n                };\n                _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                _product: true;\n                _supplier: THIS;\n            };\n            try: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIERS_1, JUST_IN_TIME_1, any, any, any> & {\n                _jitOnly?: true;\n            }, SUPPLIERS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], JUST_IN_TIME_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], TRIED_SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, true>[]>(this: THIS, ...suppliers: TRIED_SUPPLIERS) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: SUPPLIERS_1 | "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], TRIED_SUPPLIERS>;\n                justInTime: "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"justInTime\"], TRIED_SUPPLIERS>;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: SUPPLIERS_1 | "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], TRIED_SUPPLIERS>;\n                justInTime: "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"justInTime\"], TRIED_SUPPLIERS>;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            with: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIERS_2, any, any, any, any>, SUPPLIERS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], WITH_SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]>(this: THIS, ...suppliers: WITH_SUPPLIERS) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: [..."
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], WITH_SUPPLIERS>, ...WITH_SUPPLIERS];\n                justInTime: any;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: [..."
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], WITH_SUPPLIERS>, ...WITH_SUPPLIERS];\n                justInTime: any;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            jitOnly: <THIS>(this: THIS) => THIS & {\n                _jitOnly: true;\n            };\n            prototype: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, SUPPLIERS_OF_PROTOTYPE extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, false>[] = [], JUST_IN_TIME_OF_PROTOTYPE extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, false>[] = []>(this: THIS, config: {\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                suppliers?: [...SUPPLIERS_OF_PROTOTYPE];\n                justInTime?: [...JUST_IN_TIME_OF_PROTOTYPE];\n                init?: (value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void;\n                lazy?: boolean;\n            }) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: SUPPLIERS_OF_PROTOTYPE;\n                justInTime: JUST_IN_TIME_OF_PROTOTYPE;\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void) | undefined;\n                lazy: boolean;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: SUPPLIERS_OF_PROTOTYPE;\n                justInTime: JUST_IN_TIME_OF_PROTOTYPE;\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void) | undefined;\n                lazy: boolean;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            _isPrototype: IS_PROTOTYPE;\n            _product: true;\n        }> extends true ? unknown : {\n            name: NAME;\n            suppliers: SUPPLIERS;\n            justInTime: JUST_IN_TIME;\n            factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME]>) => VALUE;\n            lazy: boolean;\n            init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>) => void) | undefined;\n            pack: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS, value: NEW_VALUE_2) => {\n                name: NAME;\n                supplies: {};\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_1, value: NEW_VALUE_3) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                    unpack: () => NEW_VALUE_3;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                    _product: true;\n                    _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                };\n                _dependsOnOneOf: () => boolean;\n                unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                reassemble<THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_1): THIS_1;\n                _product: true;\n                _supplier: THIS;\n            };\n            assemble: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>) => {\n                name: NAME;\n                supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_1, value: NEW_VALUE_3) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                    unpack: () => NEW_VALUE_3;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                    _product: true;\n                    _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                };\n                unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"factory\"]>;\n                reassemble<THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_1, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_1 & {\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"]>;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"factory\"]>;\n                };\n                _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                _product: true;\n                _supplier: THIS;\n            };\n            try: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIERS_1, JUST_IN_TIME_1, any, any, any> & {\n                _jitOnly?: true;\n            }, SUPPLIERS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], JUST_IN_TIME_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], TRIED_SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, true>[]>(this: THIS, ...suppliers: TRIED_SUPPLIERS) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: SUPPLIERS_1 | "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], TRIED_SUPPLIERS>;\n                justInTime: "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"justInTime\"], TRIED_SUPPLIERS>;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: SUPPLIERS_1 | "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], TRIED_SUPPLIERS>;\n                justInTime: "
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"justInTime\"], TRIED_SUPPLIERS>;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            with: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIERS_2, any, any, any, any>, SUPPLIERS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], WITH_SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]>(this: THIS, ...suppliers: WITH_SUPPLIERS) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: [..."
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], WITH_SUPPLIERS>, ...WITH_SUPPLIERS];\n                justInTime: any;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: [..."
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<THIS[\"suppliers\"], WITH_SUPPLIERS>, ...WITH_SUPPLIERS];\n                justInTime: any;\n                factory: (supplies: any, justInTime: any) => VALUE;\n                init: ((value: VALUE, supplies: any) => void) | undefined;\n                lazy: boolean | undefined;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            jitOnly: <THIS>(this: THIS) => THIS & {\n                _jitOnly: true;\n            };\n            prototype: <THIS extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, SUPPLIERS_OF_PROTOTYPE extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, false>[] = [], JUST_IN_TIME_OF_PROTOTYPE extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, false>[] = []>(this: THIS, config: {\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                suppliers?: [...SUPPLIERS_OF_PROTOTYPE];\n                justInTime?: [...JUST_IN_TIME_OF_PROTOTYPE];\n                init?: (value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void;\n                lazy?: boolean;\n            }) => "
            },
            {
              "kind": "Reference",
              "text": "HasCircularDependency",
              "canonicalReference": "commodity!HasCircularDependency:type"
            },
            {
              "kind": "Content",
              "text": "<{\n                name: NAME;\n                suppliers: SUPPLIERS_OF_PROTOTYPE;\n                justInTime: JUST_IN_TIME_OF_PROTOTYPE;\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void) | undefined;\n                lazy: boolean;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            }> extends true ? unknown : {\n                name: NAME;\n                suppliers: SUPPLIERS_OF_PROTOTYPE;\n                justInTime: JUST_IN_TIME_OF_PROTOTYPE;\n                factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME_OF_PROTOTYPE]>) => VALUE;\n                init: ((value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS_OF_PROTOTYPE>) => void) | undefined;\n                lazy: boolean;\n                pack: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>, NEW_VALUE_2 extends VALUE>(this: THIS_1, value: NEW_VALUE_2) => {\n                    name: NAME;\n                    supplies: {};\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    _dependsOnOneOf: () => boolean;\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NEW_VALUE_2>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_2, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_2): THIS_2;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                assemble: <THIS_1 extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, any, any>>(this: THIS_1, toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>) => {\n                    name: NAME;\n                    supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                    pack: <THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>, NEW_VALUE_3 extends VALUE>(this: THIS_2, value: NEW_VALUE_3) => {\n                        name: NAME;\n                        supplies: {};\n                        pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>;\n                        unpack: () => NEW_VALUE_3;\n                        reassemble<THIS_3 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, NEW_VALUE_3, "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>>>(this: THIS_3): THIS_3;\n                        _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n                        _product: true;\n                        _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n                    };\n                    unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    reassemble<THIS_2 extends "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any>>(this: THIS_2, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): THIS_2 & {\n                        supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"suppliers\"]>;\n                        unpack: () => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<THIS_1[\"factory\"]>;\n                    };\n                    _dependsOnOneOf(this: "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<any, any, any>, overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "): boolean;\n                    _product: true;\n                    _supplier: THIS_1;\n                };\n                jitOnly: <THIS_1>(this: THIS_1) => THIS_1 & {\n                    _jitOnly: true;\n                };\n                _isPrototype: true;\n                _product: true;\n            };\n            _isPrototype: IS_PROTOTYPE;\n            _product: true;\n        };\n    };\n}"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 1014
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "createMarket"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!ExcludeSuppliersType:type",
          "docComment": "/**\n * Recursively filters out suppliers of a specific type from a supplier array. This is used internally to separate product suppliers from resource suppliers during dependency resolution.\n *\n * @typeParam SUPPLIERS - The array of suppliers to filter\n *\n * @typeParam TYPE - The supplier type to exclude (ProductSupplier or ResourceSupplier)\n *\n * @returns A new array with the specified supplier type removed\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ExcludeSuppliersType<SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": ", TYPE extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any> | "
            },
            {
              "kind": "Reference",
              "text": "ResourceSupplier",
              "canonicalReference": "commodity!ResourceSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "SUPPLIERS extends readonly [infer Head, ...infer Tail] ? Head extends TYPE ? Tail extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? "
            },
            {
              "kind": "Reference",
              "text": "ExcludeSuppliersType",
              "canonicalReference": "commodity!ExcludeSuppliersType:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, TYPE> : [] : Tail extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? [Head, ..."
            },
            {
              "kind": "Reference",
              "text": "ExcludeSuppliersType",
              "canonicalReference": "commodity!ExcludeSuppliersType:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, TYPE>] : [Head] : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "ExcludeSuppliersType",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TYPE",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 9,
            "endIndex": 18
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!FilterSuppliers:type",
          "docComment": "/**\n * Filters out suppliers from OLD that have matching names in NEW. This is used by the `with` method to remove old suppliers before adding new ones. Unlike `TrySuppliers`, this completely removes matching suppliers instead of replacing them.\n *\n * @typeParam OLD - The original array of suppliers to filter\n *\n * @typeParam NEW - The array of suppliers whose names should be removed from OLD\n *\n * @returns A filtered array with suppliers whose names appear in NEW removed\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type FilterSuppliers<OLD extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": ", NEW extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "OLD extends [infer Head, ...infer Tail] ? Tail extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? Head extends {\n    name: NEW[number][\"name\"];\n} ? "
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, NEW> : [Head, ..."
            },
            {
              "kind": "Reference",
              "text": "FilterSuppliers",
              "canonicalReference": "commodity!FilterSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, NEW>] : Head extends {\n    name: NEW[number][\"name\"];\n} ? [] : [Head] : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "FilterSuppliers",
          "typeParameters": [
            {
              "typeParameterName": "OLD",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "NEW",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 14
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!HasCircularDependency:type",
          "docComment": "/**\n * Checks if a supplier has a circular dependency by seeing if its name appears in the transitive dependencies of its own suppliers. This prevents infinite loops during dependency resolution.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type HasCircularDependency<SUPPLIER extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>, \"name\" | \"suppliers\">"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "SUPPLIER[\"name\"] extends ("
            },
            {
              "kind": "Reference",
              "text": "TransitiveSuppliers",
              "canonicalReference": "commodity!TransitiveSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIER[\"suppliers\"]>[number] extends infer S ? S extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any> ? S[\"name\"] : never : never) ? true : false"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "HasCircularDependency",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIER",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 11
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "commodity!index:function(1)",
          "docComment": "/**\n * Creates an indexed map from an array of objects with name properties. This is used internally to convert supplier arrays into lookup maps for type-safe access to just-in-time dependencies.\n *\n * The index function transforms an array into a map where each element is keyed by its `name` property, enabling efficient lookup and type inference.\n *\n * @param list - Array of objects with name properties\n *\n * @typeParam LIST - An array type where each element has a `name` property\n *\n * @returns A map where keys are the name properties and values are the objects\n *\n * @example\n * ```typescript\n * const suppliers = [\n *   { name: \"userRepo\", type: \"repository\" },\n *   { name: \"logger\", type: \"service\" }\n * ]\n * const indexed = index(...suppliers)\n * // Result: {\n * //   userRepo: { name: \"userRepo\", type: \"repository\" },\n * //   logger: { name: \"logger\", type: \"service\" }\n * // }\n *\n * // Type-safe access\n * indexed.userRepo // { name: \"userRepo\", type: \"repository\" }\n * indexed.logger   // { name: \"logger\", type: \"service\" }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function index<LIST extends "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n}[]"
            },
            {
              "kind": "Content",
              "text": ">(...list: "
            },
            {
              "kind": "Content",
              "text": "LIST"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<LIST>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "list",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "LIST",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "index"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!MapFromList:type",
          "docComment": "/**\n * Converts an array of objects with name properties into a map where keys are the names. This is used internally to create lookup maps from supplier arrays for type-safe access.\n *\n * @typeParam LIST - An array of objects that have a `name` property\n *\n * @returns A map type where each key is a name from the list and values are the corresponding objects\n *\n * @example\n * ```typescript\n * type Services = [\n *   { name: \"userRepo\", type: UserRepository },\n *   { name: \"logger\", type: Logger }\n * ]\n * type ServiceMap = MapFromList<Services>\n * // Result: { userRepo: { name: \"userRepo\", type: UserRepository }, logger: { name: \"logger\", type: Logger } }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type MapFromList<LIST extends "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n}[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "LIST extends [] ? "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<never, never> : "
            },
            {
              "kind": "Reference",
              "text": "Merge",
              "canonicalReference": "commodity!Merge:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    [K in keyof LIST]: {\n        [NAME in LIST[K][\"name\"]]: LIST[K];\n    };\n}[number]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "MapFromList",
          "typeParameters": [
            {
              "typeParameterName": "LIST",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!Merge:type",
          "docComment": "/**\n * Merges a union type into a single intersection type. This utility type is used internally to combine multiple types into one cohesive type.\n *\n * @typeParam U - The union type to merge\n *\n * @returns An intersection type that combines all members of the union\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Merge<U> = "
            },
            {
              "kind": "Content",
              "text": "(U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Merge",
          "typeParameters": [
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!Product:type",
          "docComment": "/**\n * Represents a product - a complex object that can be assembled from dependencies. Products can depend on other suppliers and support reassembly with overrides. They represent fully constructed instances with resolved dependencies.\n *\n * @typeParam NAME - The unique identifier name for this product\n *\n * @typeParam VALUE - The type of value this product produces\n *\n * @typeParam SUPPLIES - The map of resolved dependencies this product uses\n *\n * @example\n * ```typescript\n * const userService: Product<\"userService\", UserService, { userRepo: Resource<\"userRepo\", UserRepository> }> = {\n *   name: \"userService\",\n *   supplies: { userRepo: userRepoResource },\n *   unpack: () => new UserService(userRepoResource.unpack()),\n *   pack: (value) => ({ ...userService, unpack: () => value }),\n *   reassemble: (overrides) => userServiceSupplier.assemble(overrides),\n *   _dependsOnOneOf: (overrides) => \"userRepo\" in overrides,\n *   _product: true,\n *   _supplier: userServiceSupplier\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Product<NAME extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", VALUE, SUPPLIES extends "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: NAME;\n    supplies: SUPPLIES;\n    unpack: () => VALUE;\n    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIES>;\n    reassemble: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIES>;\n    _dependsOnOneOf: (overrides: "
            },
            {
              "kind": "Reference",
              "text": "SupplyMap",
              "canonicalReference": "commodity!SupplyMap:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean;\n    _product: true;\n    _supplier: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, any>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Product",
          "typeParameters": [
            {
              "typeParameterName": "NAME",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "VALUE",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SUPPLIES",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!ProductSupplier:type",
          "docComment": "/**\n * Represents a product supplier - a factory for creating products with dependencies. Product suppliers define how to assemble complex objects from their dependencies. They support various features like lazy loading, prototypes, and just-in-time resolution.\n *\n * @typeParam NAME - The unique identifier name for this product supplier\n *\n * @typeParam VALUE - The type of value this supplier produces\n *\n * @typeParam SUPPLIERS - Array of suppliers this product depends on\n *\n * @typeParam JUST_IN_TIME - Array of suppliers resolved just-in-time (lazy)\n *\n * @typeParam SUPPLIES - The resolved supply map for dependencies\n *\n * @typeParam JUST_IN_TIME_MAP - The map of just-in-time suppliers\n *\n * @typeParam IS_PROTOTYPE - Whether this supplier is a prototype variant\n *\n * @example\n * ```typescript\n * const userServiceSupplier: ProductSupplier<\"userService\", UserService, [typeof userRepoSupplier]> = {\n *   name: \"userService\",\n *   suppliers: [userRepoSupplier],\n *   justInTime: [],\n *   factory: (supplies) => new UserService(supplies.userRepo.unpack()),\n *   assemble: (toSupply) => ({ ...productInstance }),\n *   pack: (value) => ({ ...packedProduct }),\n *   jitOnly: () => ({ ...this, _jitOnly: true }),\n *   _isPrototype: false,\n *   _product: true\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ProductSupplier<NAME extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", VALUE, SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", JUST_IN_TIME extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", SUPPLIES extends "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>"
            },
            {
              "kind": "Content",
              "text": ", JUST_IN_TIME_MAP extends "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME]>"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[\n    ...JUST_IN_TIME\n]>"
            },
            {
              "kind": "Content",
              "text": ", IS_PROTOTYPE extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Content",
              "text": "false"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: NAME;\n    suppliers: SUPPLIERS;\n    justInTime: JUST_IN_TIME;\n    factory: (supplies: SUPPLIES, justInTime: JUST_IN_TIME_MAP) => VALUE;\n    assemble: (toSupply: "
            },
            {
              "kind": "Reference",
              "text": "ToSupply",
              "canonicalReference": "commodity!ToSupply:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIES>;\n    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<never, never>>;\n    try?: (...suppliers: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, true>[]) => "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, true>;\n    with?: (...suppliers: "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, false>[]) => "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, true>;\n    jitOnly: () => "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, any, any, any, any, false>;\n    prototype?: ({ factory, suppliers, justInTime, init, lazy }: {\n        factory: (supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]>, justInTime: "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]>) => VALUE;\n        suppliers?: "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[];\n        justInTime?: "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[];\n        init?: (value: VALUE, supplies: "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]>) => void;\n        lazy?: boolean;\n    }) => "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[], any, any, true>;\n    init?: (value: VALUE, supplies: SUPPLIES) => void;\n    lazy?: boolean;\n    _isPrototype: IS_PROTOTYPE;\n    _product: true;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "ProductSupplier",
          "typeParameters": [
            {
              "typeParameterName": "NAME",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "VALUE",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "typeParameterName": "JUST_IN_TIME",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "defaultTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "typeParameterName": "SUPPLIES",
              "constraintTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "defaultTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 18
              }
            },
            {
              "typeParameterName": "JUST_IN_TIME_MAP",
              "constraintTokenRange": {
                "startIndex": 19,
                "endIndex": 21
              },
              "defaultTypeTokenRange": {
                "startIndex": 22,
                "endIndex": 24
              }
            },
            {
              "typeParameterName": "IS_PROTOTYPE",
              "constraintTokenRange": {
                "startIndex": 25,
                "endIndex": 26
              },
              "defaultTypeTokenRange": {
                "startIndex": 27,
                "endIndex": 28
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 29,
            "endIndex": 70
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!Resource:type",
          "docComment": "/**\n * Represents a resource - a simple value container that can be packed and unpacked. Resources are immutable value holders that don't depend on other suppliers. They provide the simplest form of dependency injection for configuration values or constants.\n *\n * @typeParam NAME - The unique identifier name for this resource\n *\n * @typeParam VALUE - The type of value this resource contains\n *\n * @example\n * ```typescript\n * const configResource: Resource<\"config\", AppConfig> = {\n *   name: \"config\",\n *   pack: (value) => configResource,\n *   unpack: () => ({ apiUrl: \"https://api.example.com\" }),\n *   _resource: true\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Resource<NAME extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", VALUE> = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: NAME;\n    pack: (value: VALUE) => "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE>;\n    unpack(): VALUE;\n    _resource: true;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Resource",
          "typeParameters": [
            {
              "typeParameterName": "NAME",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "VALUE",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!ResourceSupplier:type",
          "docComment": "/**\n * Represents a resource supplier - a factory for creating resources of a specific constraint type. Resource suppliers define the contract for what values can be packed into a resource. They ensure type safety by constraining the values that can be supplied.\n *\n * @typeParam NAME - The unique identifier name for this resource supplier\n *\n * @typeParam CONSTRAINT - The type constraint for values this supplier can accept\n *\n * @example\n * ```typescript\n * const configSupplier: ResourceSupplier<\"config\", AppConfig> = {\n *   name: \"config\",\n *   pack: (value: AppConfig) => ({ name: \"config\", pack: configSupplier.pack, unpack: () => value, _resource: true }),\n *   _resource: true,\n *   _constraint: null as unknown as AppConfig\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ResourceSupplier<NAME extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", CONSTRAINT> = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: NAME;\n    pack: (value: CONSTRAINT) => "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, CONSTRAINT>;\n    _resource: true;\n    _constraint: CONSTRAINT;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "ResourceSupplier",
          "typeParameters": [
            {
              "typeParameterName": "NAME",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "CONSTRAINT",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!Supplier:type",
          "docComment": "/**\n * Union type representing any kind of supplier. A supplier can be either a product supplier (complex objects with dependencies) or a resource supplier (simple value containers). This is the base type used throughout the commodity system for dependency injection.\n *\n * @typeParam NAME - The unique identifier name for this supplier\n *\n * @typeParam VALUE - The type of value this supplier provides\n *\n * @typeParam SUPPLIERS - Array of suppliers this depends on (for product suppliers)\n *\n * @typeParam JUST_IN_TIME - Array of just-in-time suppliers (for product suppliers)\n *\n * @typeParam SUPPLIES - The resolved supply map (for product suppliers)\n *\n * @typeParam JUST_IN_TIME_MAP - The map of just-in-time suppliers (for product suppliers)\n *\n * @typeParam IS_PROTOTYPE - Whether this is a prototype variant (for product suppliers)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type Supplier<NAME extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", VALUE, SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": ", JUST_IN_TIME extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": ", SUPPLIES extends "
            },
            {
              "kind": "Reference",
              "text": "$",
              "canonicalReference": "commodity!$:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>"
            },
            {
              "kind": "Content",
              "text": ", JUST_IN_TIME_MAP extends "
            },
            {
              "kind": "Reference",
              "text": "MapFromList",
              "canonicalReference": "commodity!MapFromList:type"
            },
            {
              "kind": "Content",
              "text": "<[...JUST_IN_TIME]>"
            },
            {
              "kind": "Content",
              "text": ", IS_PROTOTYPE extends "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIERS, JUST_IN_TIME, SUPPLIES, JUST_IN_TIME_MAP, IS_PROTOTYPE> | "
            },
            {
              "kind": "Reference",
              "text": "ResourceSupplier",
              "canonicalReference": "commodity!ResourceSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Supplier",
          "typeParameters": [
            {
              "typeParameterName": "NAME",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "VALUE",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "JUST_IN_TIME",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SUPPLIES",
              "constraintTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "JUST_IN_TIME_MAP",
              "constraintTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "IS_PROTOTYPE",
              "constraintTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 17,
            "endIndex": 21
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!SupplyMap:type",
          "docComment": "/**\n * A map of supplies where keys are supplier names and values are products or resources. This is used for dependency resolution and reassembly operations. The map enables dynamic lookup of dependencies at runtime while maintaining type safety.\n *\n * @example\n * ```typescript\n * const supplies: SupplyMap = {\n *   userRepo: userRepoResource,\n *   logger: loggerProduct,\n *   config: configResource\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type SupplyMap = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any> | "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "SupplyMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!SupplyMapFromSuppliers:type",
          "docComment": "/**\n * Converts an array of suppliers into a supply map with the correct product/resource types. This type transformation ensures that each supplier is mapped to its corresponding assembled product or resource, maintaining full type safety.\n *\n * @typeParam SUPPLIERS - Array of supplier types to convert into a supply map\n *\n * @returns A map where keys are supplier names and values are their assembled products/resources\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type SupplyMapFromSuppliers<SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [SUPPLIER in SUPPLIERS[number] as SUPPLIER[\"name\"]]: SUPPLIER extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<infer NAME, infer VALUE, any, any, infer SUPPLIES, any, any> ? "
            },
            {
              "kind": "Reference",
              "text": "Product",
              "canonicalReference": "commodity!Product:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE, SUPPLIES> : SUPPLIER extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSupplier",
              "canonicalReference": "commodity!ResourceSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<infer NAME, infer VALUE> ? "
            },
            {
              "kind": "Reference",
              "text": "Resource",
              "canonicalReference": "commodity!Resource:type"
            },
            {
              "kind": "Content",
              "text": "<NAME, VALUE> : never;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "SupplyMapFromSuppliers",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!ToSupply:type",
          "docComment": "/**\n * Determines which suppliers need to be supplied externally when assembling a product. This type computes the set of resource suppliers that must be provided because they cannot be automatically assembled. It excludes product suppliers (which can be assembled) and returns only the resource suppliers from the transitive dependency tree.\n *\n * @typeParam SUPPLIERS - The array of suppliers to analyze\n *\n * @returns A supply map of only the resource suppliers that must be provided\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type ToSupply<SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "SupplyMapFromSuppliers",
              "canonicalReference": "commodity!SupplyMapFromSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExcludeSuppliersType",
              "canonicalReference": "commodity!ExcludeSuppliersType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransitiveSuppliers",
              "canonicalReference": "commodity!TransitiveSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<SUPPLIERS>, "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "ToSupply",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!TransitiveSuppliers:type",
          "docComment": "/**\n * Recursively collects all transitive dependencies of a supplier array. This type walks through the dependency tree, collecting each supplier and all of its nested dependencies into a flattened array. This is essential for understanding the complete dependency graph.\n *\n * @typeParam SUPPLIERS - The array of suppliers to collect transitive dependencies from\n *\n * @returns A flattened array containing all suppliers and their transitive dependencies\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TransitiveSuppliers<SUPPLIERS extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "SUPPLIERS extends [infer FIRST, ...infer REST] ? FIRST extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, infer CHILD_SUPPLIERS, any, any, any, any> ? [\n    FIRST,\n    ..."
            },
            {
              "kind": "Reference",
              "text": "TransitiveSuppliers",
              "canonicalReference": "commodity!TransitiveSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<CHILD_SUPPLIERS>,\n    ..."
            },
            {
              "kind": "Reference",
              "text": "TransitiveSuppliers",
              "canonicalReference": "commodity!TransitiveSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<REST extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? REST : []>\n] : FIRST extends "
            },
            {
              "kind": "Reference",
              "text": "ResourceSupplier",
              "canonicalReference": "commodity!ResourceSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any> ? [\n    FIRST,\n    ..."
            },
            {
              "kind": "Reference",
              "text": "TransitiveSuppliers",
              "canonicalReference": "commodity!TransitiveSuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<REST extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? REST : []>\n] : never : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "TransitiveSuppliers",
          "typeParameters": [
            {
              "typeParameterName": "SUPPLIERS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 4,
            "endIndex": 19
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "commodity!TrySuppliers:type",
          "docComment": "/**\n * Merges two supplier arrays, replacing old suppliers with new ones when names match. This is used by the `try` method to provide alternative implementations for dependencies. When a supplier name exists in both arrays, the new supplier takes precedence.\n *\n * @typeParam OLD - The original array of suppliers\n *\n * @typeParam NEW - The new array of suppliers to merge in\n *\n * @returns A merged array where matching names from NEW replace those in OLD\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type TrySuppliers<OLD extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": ", NEW extends "
            },
            {
              "kind": "Reference",
              "text": "ProductSupplier",
              "canonicalReference": "commodity!ProductSupplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "OLD extends [infer Head, ...infer Tail] ? Tail extends "
            },
            {
              "kind": "Reference",
              "text": "Supplier",
              "canonicalReference": "commodity!Supplier:type"
            },
            {
              "kind": "Content",
              "text": "<string, any, any, any, any, any, any>[] ? Head extends {\n    name: NEW[number][\"name\"];\n} ? [\n    "
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<NEW[number], {\n        name: Head[\"name\"];\n    }>,\n    ..."
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, NEW>\n] : [\n    Head,\n    ..."
            },
            {
              "kind": "Reference",
              "text": "TrySuppliers",
              "canonicalReference": "commodity!TrySuppliers:type"
            },
            {
              "kind": "Content",
              "text": "<Tail, NEW>\n] : Head extends {\n    name: NEW[number][\"name\"];\n} ? ["
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<NEW[number], {\n    name: Head[\"name\"];\n}>] : [Head] : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "TrySuppliers",
          "typeParameters": [
            {
              "typeParameterName": "OLD",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "NEW",
              "constraintTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 18
          }
        }
      ]
    }
  ]
}
